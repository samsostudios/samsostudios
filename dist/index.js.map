{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/components/siteFrame.ts", "../src/utils/fomattedTime.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`http://localhost:${SERVE_PORT}/esbuild`).addEventListener('change', () =>\n  location.reload()\n);\n", "import { gsap } from 'gsap';\n\nexport const siteFrame = () => {\n  const siteFrame = document.querySelector('.site_frame') as HTMLElement;\n\n  // init();\n  // resize();\n\n  // function init() {\n  //   const tFrame = siteFrame.querySelector('.frame_verical.is-top') as HTMLElement;\n  //   const bFrame = siteFrame.querySelector('.frame_verical.is-bottom') as HTMLElement;\n  //   const tHeight = tFrame.clientHeight;\n\n  //   console.log(tFrame.clientHeight, bFrame.clientHeight);\n\n  //   const lrFrames = gsap.utils.toArray('.frame_horizontal');\n  //   lrFrames.forEach((element) => {\n  //     const temp = element as HTMLElement;\n  //     //   gsap.set(temp, { height: window.innerHeight - 2 * tbHeight });\n  //   });\n\n  //   // console.log('height', tbHeight, window.innerHeight);\n  // }\n\n  // function resize() {\n  //   window.addEventListener('resize', () => {\n  //     init();\n  //   });\n  // }\n};\n", "export const formattedTime = () => {\n  const now: Date = new Date();\n\n  function isDST(date: Date): boolean {\n    const year = date.getUTCFullYear();\n    const secondSundayOfMarch = new Date(Date.UTC(year, 2, 8));\n    while (secondSundayOfMarch.getUTCDay() !== 0) {\n      secondSundayOfMarch.setUTCDate(secondSundayOfMarch.getUTCDate() + 1);\n    }\n\n    const firstSundayOfNovember = new Date(Date.UTC(year, 10, 1));\n    while (firstSundayOfNovember.getUTCDay() !== 0) {\n      firstSundayOfNovember.setUTCDate(firstSundayOfNovember.getUTCDate() + 1);\n    }\n\n    return date >= secondSundayOfMarch && date < firstSundayOfNovember;\n  }\n\n  const offset: number = isDST(now) ? 6 * 60 * 60 * 1000 : 7 * 60 * 60 * 1000;\n\n  const nowInMT: Date = new Date(now.valueOf() - offset);\n\n  let hours: number = nowInMT.getUTCHours();\n  const minutes: string = String(nowInMT.getUTCMinutes()).padStart(2, '0');\n  const seconds: string = String(nowInMT.getUTCSeconds()).padStart(2, '0');\n\n  const period: string = hours >= 12 ? 'PM' : 'AM';\n\n  hours = hours % 12;\n  hours = hours ? hours : 12;\n  const formattedHours: string = String(hours).padStart(2, '0');\n\n  const formattedTime = `${formattedHours}:${minutes}:${seconds} ${period}`;\n\n  return formattedTime;\n};\n", "import { siteFrame } from '$components/siteFrame';\nimport { formattedTime } from '$utils/fomattedTime';\n\nwindow.Webflow ||= [];\nwindow.Webflow.push(() => {\n  const time = formattedTime();\n  console.log('// \uD83C\uDF0E -- ' + time + ' //');\n\n  // Global Modules\n  siteFrame();\n});\n"],
  "mappings": ";;;AAAA,MAAI,YAAY,oBAAoB,aAAoB,EAAE;AAAA,IAAiB;AAAA,IAAU,MACnF,SAAS,OAAO;AAAA,EAClB;;;ACAO,MAAM,YAAY,MAAM;AAC7B,UAAMA,aAAY,SAAS,cAAc,aAAa;AAAA,EA0BxD;;;AC7BO,MAAM,gBAAgB,MAAM;AACjC,UAAM,MAAY,oBAAI,KAAK;AAE3B,aAAS,MAAM,MAAqB;AAClC,YAAM,OAAO,KAAK,eAAe;AACjC,YAAM,sBAAsB,IAAI,KAAK,KAAK,IAAI,MAAM,GAAG,CAAC,CAAC;AACzD,aAAO,oBAAoB,UAAU,MAAM,GAAG;AAC5C,4BAAoB,WAAW,oBAAoB,WAAW,IAAI,CAAC;AAAA,MACrE;AAEA,YAAM,wBAAwB,IAAI,KAAK,KAAK,IAAI,MAAM,IAAI,CAAC,CAAC;AAC5D,aAAO,sBAAsB,UAAU,MAAM,GAAG;AAC9C,8BAAsB,WAAW,sBAAsB,WAAW,IAAI,CAAC;AAAA,MACzE;AAEA,aAAO,QAAQ,uBAAuB,OAAO;AAAA,IAC/C;AAEA,UAAM,SAAiB,MAAM,GAAG,IAAI,IAAI,KAAK,KAAK,MAAO,IAAI,KAAK,KAAK;AAEvE,UAAM,UAAgB,IAAI,KAAK,IAAI,QAAQ,IAAI,MAAM;AAErD,QAAI,QAAgB,QAAQ,YAAY;AACxC,UAAM,UAAkB,OAAO,QAAQ,cAAc,CAAC,EAAE,SAAS,GAAG,GAAG;AACvE,UAAM,UAAkB,OAAO,QAAQ,cAAc,CAAC,EAAE,SAAS,GAAG,GAAG;AAEvE,UAAM,SAAiB,SAAS,KAAK,OAAO;AAE5C,YAAQ,QAAQ;AAChB,YAAQ,QAAQ,QAAQ;AACxB,UAAM,iBAAyB,OAAO,KAAK,EAAE,SAAS,GAAG,GAAG;AAE5D,UAAMC,iBAAgB,GAAG,kBAAkB,WAAW,WAAW;AAEjE,WAAOA;AAAA,EACT;;;AChCA,SAAO,YAAY,CAAC;AACpB,SAAO,QAAQ,KAAK,MAAM;AACxB,UAAM,OAAO,cAAc;AAC3B,YAAQ,IAAI,qBAAc,OAAO,KAAK;AAGtC,cAAU;AAAA,EACZ,CAAC;",
  "names": ["siteFrame", "formattedTime"]
}
